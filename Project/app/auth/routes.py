# üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –ø–æ–º–æ—â–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –∏ –ø–æ—Ç–≤—ä—Ä–∂–¥–∞–≤–∞–Ω–µ –Ω–∞ –∏–º–µ–π–ª
from app.utils.email_utils import send_confirmation_email, confirm_token
# üåê –û—Å–Ω–æ–≤–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞ —É–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
from flask import render_template, redirect, url_for, flash, request
# üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ (–ª–æ–≥–≤–∞–Ω–µ, —Ç–µ–∫—É—â –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –∏ –¥–æ—Å—Ç—ä–ø)
from flask_login import login_user, logout_user, current_user, login_required
# ‚ö†Ô∏è –ó–∞ —É–ª–∞–≤—è–Ω–µ –Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥—É–±–ª–∏—Ä–∞—â–∏ —Å–µ –¥–∞–Ω–Ω–∏ (–Ω–∞–ø—Ä. –∏–º–µ–π–ª –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞)
from sqlalchemy.exc import IntegrityError
# üìß –ò–º–µ–π–ª —Å—ä–æ–±—â–µ–Ω–∏—è (—Ç—É–∫ –Ω–µ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞ –¥–∏—Ä–µ–∫—Ç–Ω–æ, –Ω–æ –º–æ–∂–µ –¥–∞ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞ –≤ send_confirmation_email)
from flask_mail import Message
# üîê –°—ä–∑–¥–∞–≤–∞–Ω–µ –∏ –≤–∞–ª–∏–¥–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–æ–∫–µ–Ω–∏ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –ø–æ –∏–º–µ–π–ª
from itsdangerous import URLSafeTimedSerializer
# üîß –î–æ—Å—Ç—ä–ø –¥–æ —Ç–µ–∫—É—â–∞—Ç–∞ Flask –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
from flask import current_app
# üóÉÔ∏è –ë–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏ (SQLAlchemy)
from app import db
# üîó Blueprint –∑–∞ auth –º–∞—Ä—à—Ä—É—Ç–∏
from app.auth import auth_bp
# üìù –§–æ—Ä–º–∏ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ª–æ–≥–∏–Ω
from app.forms import RegistrationForm, LoginForm
# üë§ –ú–æ–¥–µ–ª–∏: –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –∏ —Ä–æ–ª—è
from app.models import User, Role


# üìå –†—É—Ç –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –Ω–æ–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
@auth_bp.route('/register', methods=['GET', 'POST'])
def register():
    # –ê–∫–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –≤–µ—á–µ –µ –ª–æ–≥–Ω–∞—Ç, –≥–æ –ø—Ä–µ–Ω–∞—Å–æ—á–≤–∞–º–µ –∫—ä–º –Ω–∞—á–∞–ª–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if current_user.is_authenticated:
        return redirect(url_for('main.index'))

    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∏–Ω—Å—Ç–∞–Ω—Ü–∏—è –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    form = RegistrationForm()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –µ –∏–∑–ø—Ä–∞—Ç–µ–Ω–∞ –∏ –µ –≤–∞–ª–∏–¥–Ω–∞
    if form.validate_on_submit():
        # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å—ä—Å –∑–∞–¥–∞–¥–µ–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ –∏ –∏–º–µ–π–ª
        user = User(
            username=form.username.data,
            email=form.email.data,
        )
        # –ó–∞–¥–∞–≤–∞–Ω–µ –Ω–∞ —Ö–µ—à–∏—Ä–∞–Ω–∞ –ø–∞—Ä–æ–ª–∞
        user.set_password(form.password.data)

        # –î–∞–≤–∞–Ω–µ –Ω–∞ —Ä–æ–ª—è "user" –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ
        user.role = Role.query.filter_by(name='user').first()

        # –î–æ–±–∞–≤—è–Ω–µ –∫—ä–º –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
        db.session.add(user)
        try:
            # –û–ø–∏—Ç –∑–∞ –∑–∞–ø–∏—Å –≤ –±–∞–∑–∞—Ç–∞
            db.session.commit()
        except IntegrityError:
            # –ê–∫–æ –∏–º–µ–π–ª—ä—Ç –∏–ª–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ—Ç–æ –∏–º–µ –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—Ç
            db.session.rollback()
            flash("Username or email already exists. Please choose another.", "danger")
            return render_template('auth/register.html', form=form)

        # –ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –∏–º–µ–π–ª –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ
        send_confirmation_email(user)
        flash("Account created! Check your email to confirm.", "info")
        return redirect(url_for('auth.login'))

    # –ê–∫–æ GET –∑–∞—è–≤–∫–∞ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ —Ñ–æ—Ä–º–∞, –ø–æ–∫–∞–∑–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–Ω–æ–≤–æ
    return render_template('auth/register.html', form=form)


# ‚úÖ –ü–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –∏–º–µ–π–ª —á—Ä–µ–∑ —Ç–æ–∫–µ–Ω
@auth_bp.route('/confirm/<token>')
def confirm_email(token):
    # –û–ø–∏—Ç –∑–∞ –≤–∞–ª–∏–¥–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–æ–∫–µ–Ω–∞
    email = confirm_token(token)
    if not email:
        flash('The confirmation link is invalid or expired.', 'danger')
        return redirect(url_for('auth.login'))

    # –¢—ä—Ä—Å–∏–º –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è —Å –¥–∞–¥–µ–Ω–∏—è –∏–º–µ–π–ª
    user = User.query.filter_by(email=email).first_or_404()

    # –ê–∫–æ –≤–µ—á–µ –µ –ø–æ—Ç–≤—ä—Ä–¥–∏–ª –∏–º–µ–π–ª–∞
    if user.email_confirmed:
        flash('Account already confirmed. Please log in.', 'info')
    else:
        # –ü–æ—Ç–≤—ä—Ä–∂–¥–∞–≤–∞–º–µ –∏ –∑–∞–ø–∞–∑–≤–∞–º–µ –≤ –±–∞–∑–∞—Ç–∞
        user.email_confirmed = True
        db.session.commit()
        flash('Email confirmed successfully!', 'success')

    return redirect(url_for('auth.login'))


# üîê –í—Ö–æ–¥ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    # –ê–∫–æ –≤–µ—á–µ –µ –ª–æ–≥–Ω–∞—Ç, –Ω—è–º–∞ –Ω—É–∂–¥–∞ –¥–∞ –≤–ª–∏–∑–∞ –æ—Ç–Ω–æ–≤–æ
    if current_user.is_authenticated:
        return redirect(url_for('main.index'))

    # –°—ä–∑–¥–∞–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞ –ª–æ–≥–∏–Ω
    form = LoginForm()

    # –ê–∫–æ —Ñ–æ—Ä–º–∞—Ç–∞ –µ –ø–æ–¥–∞–¥–µ–Ω–∞ –∏ –µ –≤–∞–ª–∏–¥–Ω–∞
    if form.validate_on_submit():
        # –¢—ä—Ä—Å–∏–º –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –ø–æ –∏–º–µ–π–ª
        user = User.query.filter_by(email=form.email.data).first()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞–Ω–µ –∏ –ø—Ä–∞–≤–∏–ª–Ω–∞ –ø–∞—Ä–æ–ª–∞
        if user and user.check_password(form.password.data):
            # –ê–∫–æ –µ –∞–¥–º–∏–Ω ‚Äì –ø—Ä–µ–Ω–∞—Å–æ—á–≤–∞–º–µ –∫—ä–º admin dashboard
            if user.role and user.role.name == 'admin':
                login_user(user, remember=form.remember.data)
                flash('Welcome, admin!', 'success')
                return redirect(url_for('admin.dashboard'))

            # –ê–∫–æ –Ω–µ –µ –ø–æ—Ç–≤—ä—Ä–¥–∏–ª –∏–º–µ–π–ª–∞ —Å–∏
            if not user.email_confirmed:
                flash('Please confirm your email before logging in.', 'warning')
                return redirect(url_for('auth.login'))

            # –í—Å–∏—á–∫–æ –µ –Ω–∞—Ä–µ–¥ ‚Äì –≤–ª–∏–∑–∞–º–µ
            login_user(user, remember=form.remember.data)
            flash('Welcome!', 'success')
            return redirect(url_for('main.survey'))
        else:
            flash('Login failed. Check your credentials.', 'danger')

    # –ü–æ–∫–∞–∑–≤–∞–º–µ –æ—Ç–Ω–æ–≤–æ —Ñ–æ—Ä–º–∞—Ç–∞
    return render_template('auth/login.html', form=form)


# üö™ –ò–∑—Ö–æ–¥ –æ—Ç –∞–∫–∞—É–Ω—Ç–∞
@auth_bp.route('/logout')
@login_required
def logout():
    # –ò–∑–ª–∏–∑–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –∏ –ø—Ä–µ–Ω–∞—Å–æ—á–≤–∞–Ω–µ –∫—ä–º –Ω–∞—á–∞–ª–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    logout_user()
    return redirect(url_for('main.index'))
