# üìÇ –ó–∞ —Ä–∞–±–æ—Ç–∞ —Å –ø—ä—Ç–∏—â–∞ –∏ —Ñ–∞–π–ª–æ–≤–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–∞
import os
# üî¢ –ó–∞ —Ä–∞–±–æ—Ç–∞ —Å —á–∏—Å–ª–æ–≤–∏ –º–∞—Å–∏–≤–∏ –∏ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ–ª–∞
import numpy as np
# ‚öôÔ∏è –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –∏ –¥–æ—Å—Ç—ä–ø –¥–æ –±–∞–∑–∞—Ç–∞
from app import create_app, db
# üìã –ú–æ–¥–µ–ª—ä—Ç –∑–∞ —Å—ä—Ö—Ä–∞–Ω–µ–Ω–∏ –æ—Ç–≥–æ–≤–æ—Ä–∏ –æ—Ç –∞–Ω–∫–µ—Ç–∞—Ç–∞
from app.models import SurveyResponse
# üß† –ò–º–ø–æ—Ä—Ç –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏—á–Ω–∏—è –º–æ–¥–µ–ª –∏ –ø—ä—Ç—è, –∫—ä–¥–µ—Ç–æ —Å–µ –∑–∞–ø–∏—Å–≤–∞
from app.utils.ai_model import model, MODEL_PATH


def get_training_data():
    # –í–∑–∏–º–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –ø–æ–ø—ä–ª–Ω–µ–Ω–∏ –∞–Ω–∫–µ—Ç–∏ –æ—Ç –±–∞–∑–∞—Ç–∞
    surveys = SurveyResponse.query.all()

    X = []  # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (inputs)
    y = []  # –¶–µ–ª–µ–≤–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç (–∫–ª–∏–∫–Ω–∞—Ç–æ –∏–ª–∏ –Ω–µ)

    for s in surveys:
        # üìè –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏ –∏ —á–∏—Å–ª–æ–≤–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
        interests_len = len(s.interests or "") / 256
        ad_count = len((s.selected_ads or "").split(',')) / 3
        device_score = 0 if s.device == 'PC' else (1 if s.device == 'Mobile' else 2) / 2

        # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –≤—Ö–æ–¥–µ–Ω –≤–µ–∫—Ç–æ—Ä
        X.append([
            s.age / 100,
            s.daily_online_hours / 24,
            device_score,
            interests_len,
            ad_count
        ])

        # üëâ –¶–µ–ª–µ–≤–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç: 1 –∞–∫–æ –∏–º–∞ –∏–∑–±—Ä–∞–Ω–∏ —Ä–µ–∫–ª–∞–º–∏, 0 –∏–Ω–∞—á–µ
        y.append(1 if ad_count > 0 else 0)

    return np.array(X), np.array(y)


def main():
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ
    app = create_app()

    # –í–ª–∏–∑–∞–Ω–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –∑–∞ –¥–æ—Å—Ç—ä–ø –¥–æ –±–∞–∑–∞—Ç–∞
    with app.app_context():
        # –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –æ—Ç –±–∞–∑–∞—Ç–∞
        X, y = get_training_data()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∏–º–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –¥–∞–Ω–Ω–∏ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ
        if len(X) == 0:
            print("No survey data found. Please collect data first.")
            return

        # –†–∞–∑–¥–µ–ª—è–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ –∏ —Ç–µ—Å—Ç–≤–∞–Ω–µ (80/20)
        split_idx = int(0.8 * len(X))
        X_train, X_test = X[:split_idx], X[split_idx:]
        y_train, y_test = y[:split_idx], y[split_idx:]

        # –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ–ª–∞ —Å —Ä–µ–∞–ª–Ω–∏—Ç–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏ –¥–∞–Ω–Ω–∏
        model.fit(X_train, y_train, epochs=200)

        # –û—Ü–µ–Ω—è–≤–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª–∞
        metrics = model.evaluate(X_test, y_test)
        
        # –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª–∞ –≤—ä–≤ —Ñ–∞–π–ª (model.pkl)
        model.save()
        
        print(f"Model trained and saved to {MODEL_PATH}")
        print("\nModel Performance Metrics:")
        print(f"Accuracy: {metrics['accuracy']:.4f}")
        print(f"Mean Squared Error: {metrics['mse']:.4f}")
        print(f"Log Loss: {metrics['log_loss']:.4f}")
        print(f"Final Training Loss: {metrics['training_loss']:.4f}")
        print(f"Final Training Accuracy: {metrics['training_accuracy']:.4f}")
        
        # –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –º–µ—Ç—Ä–∏–∫–∏—Ç–µ –≤ –æ—Ç–¥–µ–ª–µ–Ω —Ñ–∞–π–ª
        import json
        metrics_file = 'instance/model_metrics.json'
        with open(metrics_file, 'w') as f:
            json.dump(metrics, f, indent=2)
        print(f"Metrics saved to {metrics_file}")


if __name__ == "__main__":
    main() 